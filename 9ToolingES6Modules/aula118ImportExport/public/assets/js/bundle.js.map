{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;;AAEO,IAAMA,IAAI,GAAG,MAAM,CAAC,CAAC;AACrB,IAAMC,SAAS,GAAG,SAAS;AAC3B,IAAMC,KAAK,GAAG,EAAE;AAER,SAASC,IAAIA,CAACC,CAAC,EAAEC,CAAC,EAAE;EAAE;EACjC,OAAOD,CAAC,GAAGC,CAAC;AAChB;AAEO,IAAMC,MAAM,gBAAAC,YAAA,CACf,SAAAD,OAAYN,IAAI,EAAEC,SAAS,EAAE;EAAAO,eAAA,OAAAF,MAAA;EACzB,IAAI,CAACN,IAAI,GAAGA,IAAI;EAChB,IAAI,CAACC,SAAS,GAAGA,SAAS;AAC9B,CAAC;;AAGL;AACA,qD;;;;;;UCrBA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA,E;;;;;WCPA,wF;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D,E;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AAC0E,CAAC;AAC3E,IAAMD,IAAI,GAAG,OAAO;AAEpBU,OAAO,CAACC,GAAG,CAACF,0CAAK,EAAER,+CAAS,EAAEC,2CAAK,EAAEF,IAAI,CAAC;AAC1CU,OAAO,CAACC,GAAG,CAACR,oDAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAEvB,IAAMS,EAAE,GAAG,IAAIN,4CAAM,CAAC,QAAQ,EAAE,UAAU,CAAC;AAC3CI,OAAO,CAACC,GAAG,CAACC,EAAE,CAAC,C","sources":["webpack://aula116webpack/./src/modulo1.js","webpack://aula116webpack/webpack/bootstrap","webpack://aula116webpack/webpack/runtime/define property getters","webpack://aula116webpack/webpack/runtime/hasOwnProperty shorthand","webpack://aula116webpack/webpack/runtime/make namespace object","webpack://aula116webpack/./src/index.js"],"sourcesContent":["// maneira mais simples de exportar (exportar o nome das variáveis, funcões, etc)\r\n// tambem é possivel mudar o nome na exportação\r\n// na importação o nome deve ser o novo\r\n// export { nome, sobrenome as sobrenome2, idade, soma };\r\n\r\nexport const nome = 'Luiz'; // exporta e cria\r\nexport const sobrenome = \"Miranda\";\r\nexport const idade = 30;\r\n\r\nexport default function soma(x, y) { // default só pode um por modulo\r\n    return x + y;\r\n}\r\n\r\nexport class Pessoa {\r\n    constructor(nome, sobrenome) {\r\n        this.nome = nome;\r\n        this.sobrenome = sobrenome;\r\n    }\r\n}\r\n\r\n// alternativa para variavel default\r\n// export { nome as default, sobrenome, idade, soma }\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// import + o nome + o caminho dele\r\n// as variaveis de mesmo nome vão conflitar\r\n// é possivel mudar o nome da variável na importação para corrigir esse erro\r\n// import { nome as nome2, sobrenome, soma, idade, Pessoa } from './modulo1'; // Aparentemente não precisa estar na mesma ordem\r\n//import * as MeuModulo from './modulo1'; // importa tudo como meu modulo\r\n// import qualquerNome from './modulo1'; // importa o default\r\nimport soma, { nome as nome2, sobrenome, idade, Pessoa } from './modulo1'; // importa o default e o resto\r\nconst nome = 'jorge';\r\n\r\nconsole.log(nome2, sobrenome, idade, nome);\r\nconsole.log(soma(2, 2));\r\n\r\nconst p1 = new Pessoa('helena', 'masafera');\r\nconsole.log(p1);\r\n"],"names":["nome","sobrenome","idade","soma","x","y","Pessoa","_createClass","_classCallCheck","nome2","console","log","p1"],"sourceRoot":""}